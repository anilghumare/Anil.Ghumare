new Vue({
  el: '#weatherApp',
  data: {
    country: '',
    state: '',
    city: '',
    states: [],
    cities: [],
    weather: null,
    error: ''
  },
  methods: {
    updateStates() {
      const stateMap = {
        India: ["Maharashtra", "Karnataka"],
        USA: ["California", "Texas"]
      };

      this.states = this.country && stateMap[this.country] ? stateMap[this.country] : [];
      this.state = '';
      this.cities = [];
      this.city = '';
      this.weather = null;
      this.error = '';
    },
    updateCities() {
      const cityMap = {
        Maharashtra: ["Mumbai", "Pune"],
        Karnataka: ["Bangalore", "Mysore"],
        California: ["Los Angeles", "San Francisco"],
        Texas: ["Houston", "Dallas"]
      };

      this.cities = this.state && cityMap[this.state] ? cityMap[this.state] : [];
      this.city = '';
      this.weather = null;
      this.error = '';
    },
    getWeather() {
      if (!this.country || !this.state || !this.city) {
        this.error = "Please select country, state, and city.";
        this.weather = null;
        return;
      }

      this.error = '';
      this.weather = null;

      // Build URL with portlet namespace and parameters
      const namespace = Liferay.Util.getPortletNamespace('com_demo_weather_WeatherForecastPortlet');
      const url = `${window.location.pathname}?p_p_id=com_demo_weather_WeatherForecastPortlet&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&country=${encodeURIComponent(this.country)}&state=${encodeURIComponent(this.state)}&city=${encodeURIComponent(this.city)}`;

      fetch(url, {
        method: 'GET',
        headers: { 'Accept': 'application/json' }
      })
        .then(response => {
          if (!response.ok) throw new Error("Network response was not ok");
          return response.json();
        })
        .then(data => {
          if (data.error) {
            this.error = data.error;
            this.weather = null;
          } else if (data.current) {
            this.weather = data.current;
            this.error = '';
          } else {
            this.error = "No weather data available";
            this.weather = null;
          }
        })
        .catch(err => {
          this.error = "Error fetching weather: " + err.message;
          this.weather = null;
        });
    }
  }
});





<%@ include file="/init.jsp" %>
<%@ taglib uri="http://liferay.com/tld/aui" prefix="aui" %>

<div id="weatherApp">
  <form @submit.prevent="getWeather">
    <label for="country">Select Country</label><br/>
    <select id="country" v-model="country" @change="updateStates">
      <option value="">-- Select Country --</option>
      <option>India</option>
      <option>USA</option>
    </select>

    <br/><br/>

    <label for="state">Select State</label><br/>
    <select id="state" v-model="state" @change="updateCities" :disabled="states.length === 0">
      <option value="">-- Select State --</option>
      <option v-for="s in states" :key="s" :value="s">{{ s }}</option>
    </select>

    <br/><br/>

    <label for="city">Select City</label><br/>
    <select id="city" v-model="city" :disabled="cities.length === 0">
      <option value="">-- Select City --</option>
      <option v-for="c in cities" :key="c" :value="c">{{ c }}</option>
    </select>

    <br/><br/>

    <button type="submit">Get Weather</button>
  </form>

  <br/>

  <div v-if="error" style="color:red;">{{ error }}</div>

  <div v-if="weather" class="card">
    <div class="card-body">
      <h5>Weather in {{ city }}</h5>
      <strong>Temperature:</strong> {{ weather.temperature }}Â°C<br/>
      <strong>Humidity:</strong> {{ weather.humidity }}%<br/>
      <strong>Wind Speed:</strong> {{ weather.wind_speed }} km/h<br/>
      <strong>Weather:</strong> {{ weather.weather_descriptions[0] }}<br/>
    </div>
  </div>
</div>







package com.demo.weather.portlet;

import com.demo.weather.config.WeatherApiConfiguration;
import com.demo.weather.constants.WeatherForecastPortletKeys;
import com.demo.weather.util.WeatherApiUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;

import java.io.IOException;

import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.metatype.annotations.Designate;
import java.util.Map;

/**
 * @author AG67176
 */
@Component(
    configurationPid = "com.demo.weather.config.WeatherApiConfiguration",
    immediate = true,
    property = {
        "com.liferay.portlet.display-category=category.sample",
        "com.liferay.portlet.header-portlet-css=/css/main.css",
        "com.liferay.portlet.instanceable=true",
        "javax.portlet.display-name=WeatherForecast",
        "javax.portlet.init-param.template-path=/",
        "javax.portlet.init-param.view-template=/view.jsp",
        "javax.portlet.name=" + WeatherForecastPortletKeys.WEATHERFORECAST,
        "javax.portlet.resource-bundle=content.Language",
        "javax.portlet.security-role-ref=power-user,user"
    },
    service = Portlet.class
)
@Designate(ocd = WeatherApiConfiguration.class)
public class WeatherForecastPortlet extends MVCPortlet {

    private volatile WeatherApiConfiguration _config;

    @Activate
    @Modified
    protected void activate(Map<String, Object> properties) {
        _config = org.osgi.service.component.annotations.ConfigurationFactoryUtil.createConfigurable(
            WeatherApiConfiguration.class, properties);
    }

    @Override
    public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
            throws IOException, PortletException {

        String city = renderRequest.getParameter("city");

        if (city != null && !city.trim().isEmpty()) {
            try {
                JSONObject weatherData = WeatherApiUtil.getWeatherData(city, _config.apiUrl(), _config.apiKey());
                renderRequest.setAttribute("weatherData", weatherData);
                renderRequest.setAttribute("city", city);
            } catch (Exception e) {
                renderRequest.setAttribute("error", "Unable to fetch weather data. Please try again later.");
            }
        }

        super.doView(renderRequest, renderResponse);
    }
}







    function submitForm() {
        document.getElementById(namespace + "weatherForm").submit();
    }
</script>
