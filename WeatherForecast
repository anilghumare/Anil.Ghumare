package com.demo.weather.config;

import org.osgi.service.metatype.annotations.AttributeDefinition;
import org.osgi.service.metatype.annotations.ObjectClassDefinition;

@ObjectClassDefinition (
		id = "com.demo.weather.config.WeatherApiConfiguration",
		name = "Weather API Configuration"
		)
public @interface WeatherApiConfiguration {
	
	@AttributeDefinition(
			name = "API URL",
			description = "http://api.weatherstack.com/current"
			)
	String apiUrl() default "http://api.weatherstack.com/current";
	
	@AttributeDefinition (
			name = "API Key",
			description = "7ec2ad5bb54eea7cf3a31b38e7cc77c8"
			)
	String apiKey() default "7ec2ad5bb54eea7cf3a31b38e7cc77c8";

}






package com.demo.weather.portlet;

import com.demo.weather.config.WeatherApiConfiguration;
import com.demo.weather.constants.WeatherForecastPortletKeys;
import com.demo.weather.util.WeatherApiUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;

import java.io.IOException;

import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.metatype.annotations.Designate;

/**
 * @author AG67176
 */
@Component(configurationPid = "com.demo.weather.config.WeatherApiConfiguration", immediate = true, property = {
		"com.liferay.portlet.display-category=category.sample", "com.liferay.portlet.header-portlet-css=/css/main.css",
		"com.liferay.portlet.instanceable=true", "javax.portlet.display-name=WeatherForecast",
		"javax.portlet.init-param.template-path=/", "javax.portlet.init-param.view-template=/view.jsp",
		"javax.portlet.name=" + WeatherForecastPortletKeys.WEATHERFORECAST,
		"javax.portlet.resource-bundle=content.Language",
		"javax.portlet.security-role-ref=power-user,user" }, service = Portlet.class)
@Designate(ocd = WeatherApiConfiguration.class)
public class WeatherForecastPortlet extends MVCPortlet {

	private WeatherApiConfiguration _config;

	protected void activate(WeatherApiConfiguration config) {
		_config = config;
	}

	public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
			throws IOException, PortletException {
		String city = renderRequest.getParameter("city");

		if (city != null && !city.isEmpty()) {
			try {
				JSONObject weatherData = WeatherApiUtil.getWeatherData(city, _config.apiUrl(), _config.apiKey());
				renderRequest.setAttribute("weatherData", weatherData);
				renderRequest.setAttribute("city", city);
			} catch (Exception e) {
				renderRequest.setAttribute("error", "Unable to fetch weather data. Please try again later.");
			}
		}

		super.doView(renderRequest, renderResponse);
	}
}


package com.demo.weather.util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;

public class WeatherApiUtil {
	
	public static JSONObject getWeatherData(String city, String apiUrl, String apiKey) throws Exception {
		String requestUrl = apiUrl + "?access_key=" + apiKey + "&query=" + city;
		
		URL url = new URL(requestUrl);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		connection.setRequestMethod("GET");
		
		int status = connection.getResponseCode();
		
		if (status != 200) {
			throw new RuntimeException("Failed to fetch weather data: HTTP status code " + status);
		}
		
		BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		StringBuilder response = new StringBuilder();
		String line;
		
		while ((line = in.readLine()) != null) {
			response.append(line);
		}
		in.close();
		
		return JSONFactoryUtil.createJSONObject(response.toString());
	}
}



<%@ include file="/init.jsp" %>
<%@ taglib uri="http://liferay.com/tld/aui" prefix="aui" %>
<%@ taglib uri="http://liferay.com/tld/clay" prefix="clay" %>
<%@ page import="com.liferay.portal.kernel.json.JSONObject" %>

<p>
	<b><liferay-ui:message key="weatherforecast.caption"/></b>
</p>

<aui:form method="get">
	<aui:input label="City" name="city" type="text" placeholder="Enter city name..." />
	<aui:button type="submit" value="Get Weather" />
</aui:form>

<%
	JSONObject weatherData = (JSONObject) request.getAttribute("weatherData");
	String error = (String) request.getAttribute("error");
	String city = (String) request.getAttribute("city");
%>

<c:if test="${not empty error}">
	<clay:alert message="${error}" displayType="danger" />
</c:if>

<c:if test="${weatherData != null}">
	<clay:card>
		<clay:card-title>
			Weather in <%= city %>
			</clay:card-title>
			
			<clay:card-body>
				<Strong>Temperature:</Strong> <%= weatherData.getJSONObject("current").get("temperature") %>C<br/>
				<Strong>Humidity:</Strong> <%= weatherData.getJSONObject("current").get("humidity") %>%<br/>
				<Strong>Wind Speed:</Strong> <%= weatherData.getJSONObject("current").get("wind_speed") %> km/h<br/>
				<Strong>Weather:</Strong> <%= weatherData.getJSONObject("current").getJSONArray("weather_descriptions").getString(0) %><br/>
			</clay:card-body>
		</clay:card>
	</c:if>




